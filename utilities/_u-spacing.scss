/* ============================================================================
   @UTILITIES -> SPACING
   ========================================================================= */


/**
 * A powerful utility to apply and remove spacing (whitespace) via `margin`
 * and `padding`. All spacing uses the spacing settings from Core -> Settings
 * -> Spacing.
 *
 * N.B. This is one of the rare occasions where the class/placeholder is
 * shortened.
 *
 * Naming convention:
 *
 * [1 | 2 | 3 | 4 | 5 | 6 | 7]
 *
 * 1. Scally type:              utility [u]
 * 2. Utility name:             spacing [s]
 * 3. Spacing type/direction:   margin [m] / padding [p] | top [t] / right [r]
 *                              / bottom [b] / left [l] / sides [s] / ends [e]
 * 5. Spacing negative:         negative [n]
 * 6. Spacing remove:           this is explicit
 * 7. Spacing amount:           this is explicit
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#spacing
 *
 * @credit
 * https://github.com/stubbornella/oocss/blob/master/oocss/src/components/
 * whitespace/_whitespace.scss
 */


/**
 * Settings.
 */

// Apply at these breakpoints
$u-spacing-breakpoints: $default-breakpoints !default;

// Spacing sizes
$u-spacing-base:        $spacing-base !default;

$u-spacing-tiny:        $spacing-third !default;

$u-spacing-small:       $spacing-half !default;

$u-spacing-large:       $spacing-base-plus-half !default;

$u-spacing-huge:        $spacing-double !default;

// Maps for the generate at breakpoint mixin

// Spacing size map
$u-spacing-sizes: (
  base:  $u-spacing-base,
  tiny:  $u-spacing-tiny,
  small: $u-spacing-small,
  large: $u-spacing-large,
  huge:  $u-spacing-huge
);

// Spacing type map (abbreviation + css property)
$u-spacing-types: (

  // All
  m:      margin,
  m-n:    margin,
  p:      padding,
  p-n:    padding,

  // Top
  mt:     margin-top,
  mt-n:   margin-top,
  pt:     padding-top,
  pt-n:   padding-top,

  // Right
  mr:     margin-right,
  mr-n:   margin-right,
  pr:     padding-right,
  pr-n:   padding-right,

  // Bottom
  mb:     margin-bottom,
  mb-n:   margin-bottom,
  pb:     padding-bottom,
  pb-n:   padding-bottom,

  // Left
  ml:     margin-left,
  ml-n:   margin-left,
  pl:     padding-left,
  pl-n:   padding-left,

  // Sides
  ms:     (margin-left, margin-right),
  ms-n:   (margin-left, margin-right),
  ps:     (padding-left, padding-right),
  ps-n:   (padding-left, padding-right),

  // Ends
  me:     (margin-top, margin-bottom),
  me-n:   (margin-top, margin-bottom),
  pe:     (padding-top, padding-bottom),
  pe-n:   (padding-top, padding-bottom),

  // None
  m-none:  margin,
  p-none:  padding,
  mt-none: margin-top,
  pt-none: padding-top,
  mr-none: margin-right,
  pr-none: padding-right,
  mb-none: margin-bottom,
  pb-none: padding-bottom,
  ml-none: margin-left,
  pl-none: padding-left,
  ms-none: (margin-left, margin-right),
  ps-none: (padding-left, padding-right),
  me-none: (margin-top, margin-bottom),
  pe-none: (padding-top, padding-bottom)
);




/**
 * Generates all breakpoint classes.
 */

@each $abbreviation, $type in $u-spacing-types {

  // No spacing classes
  @if str_index($abbreviation, '-none') != null {
    @include generate-at-breakpoints(".u-s-#{$abbreviation}",
        $u-spacing-breakpoints) {
        @include to-rem($type, 0);
      }
  }

  // Everything else
  @else {

    // Loop through the sizes
    @each $size in (base tiny small large huge) {
      @include generate-at-breakpoints(".u-s-#{$abbreviation}-#{$size}",
        $u-spacing-breakpoints, $include-base-class: true) {

        // Get all the sizes
        $size-value: map-get($u-spacing-sizes, $size);

        // Negative spacing
        @if str_index($abbreviation, '-n') != null {
          $size-value: $size-value * -1;
        }

        // All other spacing
        @include to-rem($type, $size-value);
      }
    }
  }
}