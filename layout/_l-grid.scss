/* ======================================================================================
   @LAYOUT -> GRID
   ====================================================================================== */


/**
 * A powerful fluid and nestable mobile first grid system.
 *
 * Combine with the viewport specific width classes found in 'Utilities -> Widths' to apply grid
 * widths at specific viewports, for example:
 *
   <div class="grid__item  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap device, at which point
 * it becomes 50% wide, or it is on a desktop device, at which point it becomes 33.333% width. See
 * breakpoints set here: 'Core -> Settings -> Breakpoints'.
 *
 * N.B. grid systems should be thought of as shelves. They contain content but are not content in
 * themselves. You put up your shelves then fill them with your stuff. By setting up our grids
 * separately to our components you can move components around a lot more easily than if they had
 * dimensions applied to them; this makes our front-ends a lot more adaptable and quick to work with.
 *
 * N.B. you should never apply any styles to a grid item, they are for layout purposes only. Apply
 * styling to content inside a grid item.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/cjyHK/
 *
 * @credit
 * https://github.com/csswizardry/csswizardry-grids/blob/master/csswizardry-grids.scss
 */


/**
 * Grid settings.
 */

/**
 * Box sizing.
 *
 * Here we set a variable assuming that `box-sizing: border-box;` is not set globally. If it has
 * been previously been defined, the following variable will be overriden and will be set to `true`.
 */

$friendly-box-model: false !default;


/**
 * Grid container.
 */

.grid {
	// Negative `margin-left` to negate the columns gutters
	@include to-rem(margin-left, -$grid-gutter-base);

	// Clear fix
	&:after {
    content: "";
    display: table;
    clear: both;
  }
}


	/**
   * 1. Cause columns to stack side-by-side.
   * 2. Space columns apart.
   * 3. Full-width unless told to behave otherwise.
   * 4. Required to combine fluid widths and fixed gutters.
   */

  .grid__item {
    float: left; // [1]
    @include to-rem(padding-left, $grid-gutter-base); // [2]
    width: 100%; // [3]

    @if $friendly-box-model == false {

    	box-sizing: border-box; // [4]

    }
  }


/**
 * Modifier: gutterless.
 */

.grid--gutterless {
	margin-left: 0;

	> .grid__item {padding-left: 0;}
}


/**
 * Modifier: gutter half.
 */

.grid--gutter-half {
	@include to-rem(margin-left, -$grid-gutter-half);

	> .grid__item {@include to-rem(padding-left, $grid-gutter-half);}
}


/**
 * Modifier: gutter third.
 */

.grid--gutter-third {
	@include to-rem(margin-left, -$grid-gutter-third);

	> .grid__item {@include to-rem(padding-left, $grid-gutter-third);}
}


/**
 * Modifier: gutter quarter.
 */

.grid--gutter-quarter {
	@include to-rem(margin-left, -$grid-gutter-quarter);

	> .grid__item {@include to-rem(padding-left, $grid-gutter-quarter);}
}


/**
 * Modifier: gutter base plus half.
 */

.grid--gutter-base-plus-half {
	@include to-rem(margin-left, -$grid-gutter-base-plus-half);

	> .grid__item {@include to-rem(padding-left, $grid-gutter-base-plus-half);}
}


/**
 * Modifier: gutter double.
 */

.grid--gutter-double {
	@include to-rem(margin-left, -$grid-gutter-double);

	> .grid__item {@include to-rem(padding-left, $grid-gutter-double);}
}


/**
 * Modifier: reversed.
 *
 * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your markup will display in
 * order 4, 3, 2, 1 on your page.
 */

.grid--reversed > .grid__item {float: right;}


/**
 * Modifier: table display for all viewports and one forwith different vertical alignment options.
 */

.grid--table {
	display: table;

	> .grid__item {
		display: table-cell;
		float: none;
	}
}

// Only for lap plus (non-palm)
@include respond-min(641) {
 .grid--table-for-lap-plus {
		display: table;

		> .grid__item {
			display: table-cell;
			float: none;
		}
	}
}

// Middle vertical alignment
.grid--table--v-align-middle > .grid__item {vertical-align: middle;}

// Bottom vertical alignment
.grid--table--v-align-bottom > .grid__item {vertical-align: bottom;}