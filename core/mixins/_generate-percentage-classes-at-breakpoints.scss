/* ============================================================================
   @CORE -> MIXINS -> GENERATE PERCENTAGE CLASSES AT BREAKPOINTS
   ========================================================================= */


/**
 * Generate percentage classes with the option to apply at different
 * breakpoints e.g. `.u-one-whole` / `.u-lap-one-whole`. The percentage classes
 * are based off the widths defined here: Core -> Settings -> Widths.
 *
 * N.B. this application for this mixin is quite unique so it's only used a few
 * times in the framework.
 *
 * @example
   @include generate-percentage-classes-at-breakpoints($breakpoints-for-width-
   classes);
 */


/**
 * Settings.
 */

// The fractions to be used for the classes
$denominators-to-be-generated:  (1 2 3 4 5 6 8 10 12) !default;

$numerators:                    (one two three four five six seven eight nine
                                ten eleven twelve) !default;

$denominators:                  (whole half third quarter fifth sixth seventh
                                eighth ninth tenth eleventh twelfth) !default;


/**
 * The mixin.
 */

@mixin generate-percentage-classes-at-breakpoints($breakpoint-names, $scally-type: "u", $class-name: null, $css-property: "width") {

  @if $class-name {
    $class-name: "#{$class-name}-"
  }

  $all-breakpoint-names: map-keys($breakpoints);

  @if $breakpoint-names == all {
    $breakpoint-names: $all-breakpoint-names;
  }

  @include generate-percentage-classes("", $scally-type, $class-name, $css-property);

  @each $breakpoint in $breakpoint-names {

    @include respond-to($breakpoint, $limit: if($breakpoint ==
        'palm', 'max', 'min')) {
      @if $breakpoint {
        $breakpoint: "#{$breakpoint}-"
      }

      @include generate-percentage-classes($breakpoint, $scally-type, $class-name, $css-property);
    }
  }
}

@mixin generate-percentage-classes($breakpoint: "", $scally-type: "u", $class-name: null, $css-property: "width") {
  @each $denominator in $denominators-to-be-generated {
    @for $numerator from 1 through max($denominator - 1, 1) {
      $denominator-suffix: if($numerator == 1, "", "s");
      .#{$scally-type}-#{$breakpoint}#{$class-name}#{nth($numerators, $numerator)}-#{nth($denominators, $denominator)#{$denominator-suffix}} {#{$css-property}: percentage($numerator/$denominator);}
    }
  }
}